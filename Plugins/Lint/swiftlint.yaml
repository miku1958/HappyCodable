swiftlint_version: 0.52.2

disabled_rules:
  # TODOs and FIXMEs should be avoided.
  - todo
  # SwiftUI use let _ frequently
  - redundant_discardable_let

  # Complexity of function bodies should be limited.
  # This can now be configured to ignore case statements, so we should enable
  - cyclomatic_complexity

  - function_parameter_count

  # Combine multiple pattern matching bindings by moving keywords out of tuples.
  - pattern_matching_keywords

  # Length limit for file/type/method
  - file_length
  - type_body_length
  - function_body_length

  # where clauses are preferred over a single if inside a for.
  - for_where

  # Trailing closure syntax should not be used when passing more than one closure argument.
  - multiple_closures_with_trailing_closure

  # Too many false alert, it has been marked as off by default in 0.50
  - weak_delegate

  # A doc comment should be attached to a declaration
  - orphaned_doc_comment
  # Enum cases should be sorted
  - sorted_enum_cases

  - trailing_comma

analyzer_rules:
  # attempts to find internal/public/open/private/fileprivate declarations that are not used
  - unused_declaration

  # All imported modules should be required to make the file compile.
  - unused_import

opt_in_rules:
  # prefer optional wrapping, optional chaining, or more constrained types within the codebase.
  - force_unwrapping

  # Prefer using Array(seq) than seq.map { $0 } to convert a sequence into an Array.
  - array_init

  # Closure end should have the same indentation as the line that started it.
  - closure_end_indentation

  # Closure expressions should have a single space inside each brace.
  - closure_spacing

  # All elements in a collection literal should be vertically aligned
  - collection_alignment

  # Conditional statements should always return on the next line
  - conditional_returns_on_newline

  # prefer `contains` over comparing `filter(where:).count` to 0
  - contains_over_filter_count

  # prefer `contains` over comparing `filter(where:).isEmpty`
  - contains_over_filter_is_empty

  # prefer contains(where:) over first(where:) != nil
  - contains_over_first_not_nil

  # prefer contains over comparison of `range(of:)` to `nil`
  - contains_over_range_nil_comparison

  # Types used for hosting only static members should be implemented as a caseless enum to avoid instantiation.
  - convenience_type

  # as we move to block based vs @objc based notification handling this will come in handy.
  - discarded_notification_center_observer

  # Encourages initializers over object literals
  - discouraged_object_literal

  # Prefer checking `isEmpty` over comparing collection to an empty array or dictionary literal
  - empty_collection_literal

  # Prefer checking `isEmpty` over comparing `count` to zero.
  - empty_count

  # Prefer checking `.isEmpty` on strings over comparing against ""
  - empty_string

  # Empty XCTest methods should be avoided.
  - empty_xctest_method

  # Explicitly calling .init() should be avoided.
  - explicit_init

  # should be avoided
  - fallthrough

  # ?
  - file_header

  # File name should not contain any whitespace.
  - file_name_no_space

  # Prefer using `.first(where:)` over `.filter { }.first` in collections.
  - first_where

  # Prefer handling thrown errors or optional binding instead of try!
  - force_try

  # Prefer using `flatMap` over `map { ... }.reduce([], +)`
  - flatmap_over_map_reduce

  # Comparing two identical operands is likely a mistake.
  - identical_operands

  # Discouraged explicit usage of the default separator.
  - joined_default_parameter

  # encourage the use of Swift 4.2's new hashing interface.
  - legacy_hashing

  # Prefer using `type.random(in:)` over legacy functions.
  - legacy_random

  # Prefer using the isMultiple(of:) function instead of using the remainder operator (%).
  - legacy_multiple

  # Array and dictionary literal end should have the same indentation as the line that started it.
  - literal_expression_end_indentation

  # Ensure declarations have a lower access control level than their enclosing parent
  - lower_acl_than_parent

  # MARK comment should be in valid format.
  - mark

  # Modifier order should be consistent
  - modifier_order

  # Chained function calls should be either on the same line, or one per line.
  - multiline_function_chains

  # nsobject subclasses should override isequals. not ==
  - nsobject_prefer_isequal

  # Prefer not to use extension access modifiers
  - no_extension_access_modifier

  # Matching an enum case against an optional enum without '?' is supported on Swift 5.1 and above.
  - optional_enum_case_matching

  # Some overridden methods should always call super
  - overridden_super_call

  # Operators should be surrounded by a single whitespace when they are being used.
  - operator_usage_whitespace

  # Combine multiple pattern matching bindings by moving keywords out of tuples.
  - pattern_matching_keywords

  # Prefer `Self` over `type(of: self)` when accessing properties or calling methods.
  - prefer_self_type_over_type_of_self

  # Prefer `.zero` over explicit init with zero parameters (e.g. CGPoint(x: 0, y: 0)`)
  - prefer_zero_over_explicit_init

  # Encourages top level constants to be prefixed by k
  - prefixed_toplevel_constant

  # Checks that all IBActions are private rather than public
  - private_action

  # Creating views using Interface Builder should be avoided.
  - prohibited_interface_builder

  # Some methods should not call super
  - prohibited_super_call

  # prefer simpler constructs over reduce(Boolean).
  - reduce_boolean

  # mutable reference can be faster than repeated copying
  - reduce_into

  # nil coalescing operator is only evaluated if the lhs is nil, coalescing operator with nil as rhs is redundant
  - redundant_nil_coalescing

  # Test files should contain a single QuickSpec or XCTestCase class.
  - single_test_class

  # Prefer using min() or max() over sorted().first or sorted().last
  - sorted_first_last

  # Imports should be sorted.
  - sorted_imports

  # Operators should be declared as static functions, not free functions.
  - static_operator

  # Prefer someBool.toggle() over someBool = !someBool.
  - toggle_bool

  # Parentheses are not needed when declaring closure arguments.
  - unneeded_parentheses_in_closure_argument

  # Unimplemented functions should be marked as unavailable.
  - unavailable_function

  # Prefer capturing references as weak to avoid potential crashes.
  - unowned_variable_capture

  # Catch statements should not declare error variables without type casting.
  - untyped_error_in_catch

  # Checks for yoda conditions
  - yoda_condition

  # Identifier names should only contain alphanumeric characters and start with
  # a lowercase character or should only contain capital letters. In an
  # exception to the above, variable names may start with a capital letter when
  # they are declared static and immutable. Variable names should not be too
  # long or too short.
  # Gives us some extra optimization, so should be enabled once it is generating
  # less false positives
  # Currently failing due to upper case enum values
  - identifier_name

  # A fatalError call should have a message.
  - fatal_error_message

  # Multiline arguments should have their surrounding brackets in a new line.
  - multiline_arguments_brackets

  # Multiline literals should have their surrounding brackets in a new line.
  - multiline_literal_brackets

  # Multiline parameters should have their surrounding brackets in a new line.
  - multiline_parameters_brackets

  # Trailing closure syntax should be used whenever possible.
  - trailing_closure

  # Function parameters should be aligned vertically if they're in multiple lines in a method call.
  - vertical_parameter_alignment_on_call

  # Prefer specific XCTest matchers over XCTAssertEqual and XCTAssertNotEqual
  - xct_specific_matcher

  #Use commas to separate types in inheritance lists
  - comma_inheritance

  # Re-bind self to a consistent identifier name.
  - self_binding

  # Directly return the expression instead of assigning it to a variable first
  - direct_return

  # Errors thrown inside this task are not handled, which may be unexpected. Handle errors inside the task, or use try await to access the Tasks value and handle errors. See this forum thread for more details: https://forums.swift.org/t/task-initializer-with-throwing-closure-swallows-error/56066
  - unhandled_throwing_task

identifier_name:
  min_length: 1
  max_length:
    warning: 60
    error: 80
  allowed_symbols: ["_"]
  validates_start_with_lowercase: error

line_length:
  warning: 400
  error: 400

nesting:
  type_level: 2
  function_level: 5

type_name:
  max_length:
    warning: 75
    error: 75
  allowed_symbols: [_]

file_header:
  required_pattern: |
    //
    //  SWIFTLINT_CURRENT_FILENAME
    //  HappyCodable
    //
    //

# Make DynamicProperty always be private
# Modified from https://gist.github.com/chriseidhof/d8c079ca97099a6122f37890a144e9b0
# Using $value to get the Binding and modifying it in the external view will get this error:
# Accessing State's value outside of being installed on a View. This will result in a constant Binding of the initial value and will not update.
# Bingding and ObservedObject were removed because both can be held separately outside of the View
# Although the StateObject can be accessed outside of the View, but there will be an error: "Accessing StateObject's object without being installed on a View. This will create a new instance each time."
custom_rules:
  DynamicProperty_private:
    included: .*\.swift
    name: "Private SwiftUI DynamicProperty"
    regex: "(?-s)@(AccessibilityFocusState|AppStorage|EnvironmentObject|FocusState|FocusedObject|FocusedObject|GestureState|Namespace|ScaledMetric|SceneStorage|State|StateObject)\\s*?\\n?(\\s|\\t)*?(var|public|internal|open)"
    message: "SwiftUI DynamicProperty variables should always be marked private."
    severity: error
  DynamicProperty_private_argument:
    included: .*\.swift
    name: "Private SwiftUI DynamicProperty"
    regex: "(?-s)@(Environment|FetchRequest|FocusedValue|GestureState|NSApplicationDelegateAdaptor|ScaledMetric|SectionedFetchRequest)\\(.*\\)\\s*?\\n?(\\s|\\t)*?(var|public|internal|open)"
    message: "SwiftUI DynamicProperty(with argument) variables should always be marked private."
    severity: error

  closure_parameter_parentheses:
    included: .*\.swift
    message:
      Closures with single parameters should not have these parameters enclosed
      in parentheses
    name: Closure Parameter Parentheses
    regex: \{ *\([^,:]*\) *in *$
    severity: error
  dispatch_execute:
    included: .*\.swift
    message:
      Don't specify the closure argument explicitly when executing on a DispatchQueue.
      Use the implicit form instead.
    name: Dispatch Execute
    regex: '\.a?sync\(execute\: \{'
    severity: error
  equality_parens:
    included: .*\.swift
    message: Prefer != instead of wrapping it in parentheses
    name: Don't unnecessarily wrap inequality statements
    regex: '!\([^{&|]+? ===? [^}&|]+?\)'
  image_literals:
    included: .*\.swift
    message: Don't use image literals.
    name: Image Literals
    regex: \#imageLiteral\(
    severity: error
  implicit_unwrapped_method_parameter:
    included: .*\.swift
    message: Avoid use of Implicitly Unwrapped Optional parameters.
    name: Implicit Unwrapped Optional Method Parameter
    regex: '(\: [A-Z][a-zA-Z]+\!(,|\)+))|(\n\s+[a-zA-Z]+\: [a-zA-Z]+\!\n)|(\->\sA-Z][a-zA-Z]+\!)'
    severity: error
  init_space:
    included: .*\.swift
    message: Remove the extra space after `init`
    name: Extra space after init
    regex: init \(
  notification_name:
    included: .*\.swift
    message:
      Notification.Name(\"notification\") is the preferred way to define notification
      Names
    name: Use Notification.Name()
    regex: (Notification.Name\(rawValue)|(let\s\w+Notification = \"\w)
    severity: error
  notification_name_observer_shorthand:
    included: .*\.swift
    message:
      'Prefer the more concise `.addObserver(name: .` vs `.addObserver(name:
      Notification.Name.`"'
    name: Use shorthand notification name
    regex: 'addObserver\(.*, name: Notification\.Name\.'
    severity: error
  notification_name_shorthand:
    included: .*\.swift
    message: "Prefer the more concise `.post(name: .` vs `.post(name: Notification.Name.`"
    name: Use shorthand notification name
    regex: '\.post\(name: Notification\.Name\.'
    severity: error
  ns_notification:
    included: .*\.swift
    message: Prefer Notification over NSNotification
    name: Notification over NSNotification
    regex: NSNotification
    severity: error
  opening_brace:
    included: .*\.swift
    match_kinds:
      - argument
      - identifier
      - keyword
      - number
      - objectliteral
      - parameter
      - placeholder
      - typeidentifier
    message:
      Opening braces should only be succeeded by a space, a new line or a closing
      brace.
    name: Opening Brace
    regex: \{[^ \r\n\}]
    severity: error
  prefer_modern_kvo:
    included: .*\.swift
    message:
      '"Instead of .addObserver(...) with string types prefer .observe(...) with
      strong Key-Path expressions."'
    name: Prefer modern KVO in swift
    regex: 'addObserver\(\w*,\sforKeyPath\:'
    severity: error
  prefer_ui_graphics_image_renderer:
    included: .*\.swift
    message: Prefer using `UIGraphicsImageRenderer` over `UIGraphicsBeginImageContextWithOptions`"
    name: Use UIGraphicsImageRenderer
    regex: UIGraphicsBeginImageContextWithOptions
    severity: error
  redundant_ternary:
    included: .*\.swift
    message:
      "Don't use a ternary where none is required. E.g. `X ? false : true` can
      be shortened to just `!X`"
    name: Redundant ternary
    regex: ' *? *(?:true|false) *\: *(?:true|false)'
    severity: error
  set_animations_enabled:
    included: .*\.swift
    message:
      Calling UIView.setAnimationsEnabled will enable/disable animations in the entire app.
      This should be avoided.
    name: Avoid calling UIView.setAnimationsEnabled
    regex: \.setAnimationsEnabled\(
    severity: error
  unnecessary_internal:
    included: .*\.swift
    message: Internal access level is the default, no need to specify it.
    name: Unnecessary use of internal
    regex: "internal (var|let|func|static) "
  unsafely_unwrapped:
    included: .*\.swift
    message: Avoid use of unsafelyUnwrapped.
    name: Unsafely Unwrapped
    regex: \.unsafelyUnwrapped
    severity: error
  use_concise_file_literals:
    excluded: .*(Test|Tests|TestCase|XCTAssertContains)\.swift
    included: .*\.swift
    message:
      "Avoid overly verbose filePath literals use #file #file is less verbose
      and results in smaller binaries"
    name: Avoid overly verbose filePath literals
    regex: "#filePath"
    severity: error
  xctassert_equal:
    included: .*\.swift
    message:
      XCTassertEqual will show the value that failed making it easier to debug
      failing test cases than XCTAssert( == ).
    name: Use XCTAssertEqual
    regex: (XCTAssert|XCTAssertTrue)\([^{\n]+? == .+?\)
    severity: error
  xctassert_fail:
    included: .*\.swift
    message: Prefer XCTFail over XCTAssertTrue(false).
    name: Use XCTFail
    regex: (XCTAssert|XCTAssertTrue)\(false
    severity: error
  xctassert_pass:
    included: .*\.swift
    message: Asserting true is unnecessary
    name: Unnecessary pass
    regex: (XCTAssert|XCTAssertTrue)\(true[,)]+
    severity: error
  yyyy_date_format:
    included: .*\.swift
    message: Usage of 'YYYY' is usually incorrect. Use 'yyyy' instead.
    name: YYYYDateFormat
    regex: YYYY
    severity: error
  PreferIndentUsingSpace:
    included: .*\.swift
    name: "Indent using spaces"
    regex: "^  "
    message: "Indent using tab instead of space. Please change your Xcode default indentation to 4 width tab"
    severity: error
